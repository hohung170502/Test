"use server";
import { getSession } from "@/app/(auth)/lib/session";
import { BE_URL } from "@/app/(auth)/_constants/url";
import { FormState, policies_form_schema } from "../_types/form-policy";

export async function createPolicy(
  state: FormState,
  formData: FormData
): Promise<FormState> {
  const validationFields = policies_form_schema.safeParse({
    name: formData.get("name"),
    description: formData.get("description"),
    permissions: formData.getAll("permissionIds"),
  });

  if (!validationFields.success) {
    console.log(
      "‚ùå Validation error:",
      validationFields.error.flatten().fieldErrors
    );
    return { error: validationFields.error.flatten().fieldErrors };
  }

  const session = await getSession();
  console.log("üîê Session:", session);

  if (!session || !session.user || !session.accessToken) {
    return { success: false, message: "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p" };
  }

  const formDataObject = {
    name: formData.get("name"),
    description: formData.get("description"),
    permissions: formData.getAll("permissionIds").map((id) => id.toString()),
  };
  console.log("üì¶ Payload g·ª≠i API:", formDataObject);
  try {
    const response = await fetch(`${BE_URL}/api/CreatePolicy`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${session.accessToken}`,
      },
      body: JSON.stringify(formDataObject),
    });

    const responseBody = await response.text();

    if (!response.ok) {
      return {
        success: false,
        message: responseBody || "L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ API",
      };
    }

    return {
      success: true,
      message: "Th√™m m·ªõi th√†nh c√¥ng",
    };
  } catch (error: any) {
    console.error("‚ùå L·ªói khi g·ªçi API th√™m ch√≠nh s√°ch:", error);
    return {
      success: false,
      message: error?.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi API",
    };
  }
}

export async function getPolicies({
  limit = 10,
  page = 1,
  sort = true,
  sortField = "",
}: {
  limit?: number;
  page?: number;
  sort?: boolean;
  sortField?: string;
}) {
  const session = await getSession();

  if (!session || !session.accessToken) {
    return { success: false, message: "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p" };
  }

  const query = new URLSearchParams({
    limit: limit.toString(),
    page: page.toString(),
    sort: sort.toString(),
    sortField: sortField,
  });

  try {
    const response = await fetch(`${BE_URL}/api/GetPolicies?${query}`, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${session.accessToken}`,
      },
    });

    if (!response.ok) {
      const text = await response.text();
      return { success: false, message: text };
    }

    const result = await response.json();

    return {
      success: true,
      policies: result.policies, // S·ª≠ d·ª•ng ƒë√∫ng tr∆∞·ªùng policies t·ª´ API
      totalDocuments: result.totalDocuments, // S·ª≠ d·ª•ng ƒë√∫ng tr∆∞·ªùng totalDocuments t·ª´ API
    };
  } catch (error: any) {
    console.error("‚ùå L·ªói khi g·ªçi API getPolicies:", error);
    return { success: false, message: error?.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh" };
  }
}

export async function updatePolicy(
  state: FormState,
  formData: FormData
): Promise<FormState> {
  const id = formData.get("id")?.toString(); // L·∫•y id t·ª´ FormData

  const validationFields = policies_form_schema.safeParse({
    name: formData.get("name"),
    description: formData.get("description"),
    sort: formData.get("sort"),
    permissionIds: formData.getAll("permissionIds"),
  });

  if (!validationFields.success) {
    console.log("‚ùå Validation error:", validationFields.error.flatten().fieldErrors);
    return { error: validationFields.error.flatten().fieldErrors };
  }

  const session = await getSession();

  if (!session || !session.user || !session.accessToken) {
    return { success: false, message: "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p" };
  }

  const formDataObject = {
    name: formData.get("name"),
    description: formData.get("description"),
    sort: parseInt(formData.get("sort")?.toString() || "0", 10),
    permissionIds: formData.getAll("permissionIds").map((id) => id.toString()),
  };

  
  try {
    const response = await fetch(`${BE_URL}/api/Account/Policies/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${session.accessToken}`,
      },
      body: JSON.stringify(formDataObject),
    });

    const responseBody = await response.text();

    if (!response.ok) {
      return {
        success: false,
        message: responseBody || "L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ API khi c·∫≠p nh·∫≠t",
      };
    }

    return {
      success: true,
      message: "C·∫≠p nh·∫≠t ch√≠nh s√°ch th√†nh c√¥ng",
    };
  } catch (error: any) {
    console.error("L·ªói khi g·ªçi API c·∫≠p nh·∫≠t ch√≠nh s√°ch:", error);
    return {
      success: false,
      message: error?.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi API",
    };
  }
}


export async function getPolicyDetail(id: string, isDeep = true) {
  const session = await getSession();

  if (!session || !session.accessToken) {
    return { success: false, message: "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p" };
  }

  try {
    const response = await fetch(`${BE_URL}/api/Account/Policies/${id}?isDeep=${isDeep}`, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${session.accessToken}`,
      },
    });

    if (!response.ok) {
      const text = await response.text();
      return { success: false, message: text };
    }

    const result = await response.json();
    return { success: true, data: result };
  } catch (error: any) {
    return { success: false, message: error?.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi API" };
  }
}

export async function deletePolicy(id: string) {
  const session = await getSession();

  if (!session || !session.accessToken) {
    return { success: false, message: "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p" };
  }

  try {
    const response = await fetch(`${BE_URL}/api/Account/Policies/${id}`, {
      method: "DELETE",
      headers: {
        Authorization: `Bearer ${session.accessToken}`,
      },
    });

    const responseText = await response.text();

    if (!response.ok) {
      return {
        success: false,
        message: responseText || "L·ªói khi x√≥a ch√≠nh s√°ch",
      };
    }

    return {
      success: true,
      message: "X√≥a ch√≠nh s√°ch th√†nh c√¥ng",
    };
  } catch (error: any) {
    console.error("‚ùå L·ªói khi g·ªçi API x√≥a ch√≠nh s√°ch:", error);
    return {
      success: false,
      message: error?.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi API",
    };
  }
}
